import speech_recognition as sr
import webbrowser
import pyttsx3
import importlib  # Add this import
import musicLibrary  # Ensure this file is in the same directory and is correctly named
import requests
from datetime import datetime
import os
import google.generativeai as genai

recognizer = sr.Recognizer()
engine = pyttsx3.init()
newsapi = "2449a5647df04d55a69e00068240d78f"

def speak(text):
    engine.say(text)
    engine.runAndWait()

def aiProcess(command):
    
# Configure the API key using an environment variable
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

    # Configuration for the model generation
    generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "application/json",
    }

    # Create the model with the specified configuration
    model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    generation_config=generation_config,
    )

    # Start a chat session
    chat_session = model.start_chat(
    history=[]  # Initial chat history (empty)
    )

    # Send a message to the model
    response = chat_session.send_message(command)

    # Print only the content of the response
    return(response.text)


def processCommand(command):
    command = command.lower()

    if "good morning" in command:
        speak("Good morning, sir! How can I assist you today?")

    elif "good night" in command:
        speak("Good night, sir! Have a great rest!")

    elif "open google" in command:
        webbrowser.open("https://google.com")

    elif "open facebook" in command:
        webbrowser.open("https://facebook.com")

    elif "open youtube" in command:
        webbrowser.open("https://youtube.com")

    elif "open python" in command:
        webbrowser.open("https://python.com")

    elif command.startswith("play"):
        importlib.reload(musicLibrary)  # Reload the musicLibrary module
        parts = command.split(" ", 1)
        if len(parts) > 1:
            song = parts[1]
            link = musicLibrary.music.get(song.lower())
            if link:
                speak(f"Playing {song} now.")
                webbrowser.open(link)
            else:
                speak("Song not found in the library.")
        else:
            speak("Please specify the song to play.")

    elif "news" in command:
        r = requests.get(f"https://newsapi.org/v2/top-headlines?country=us&apiKey={newsapi}")
        if r.status_code == 200:
            data = r.json()
            for article in data['articles']:
                speak(article['title'])
        else:
            speak("I am unable to fetch the news right now.")

    elif "time" in command:
        now = datetime.now().strftime("%H:%M")
        speak(f"The time is {now}")

    elif "date" in command:
        today = datetime.now().strftime("%B %d, %Y")
        speak(f"Today is {today}")

    elif "who are you" in command or "what is your name" in command:
        speak("I am Jarvis, your personal assistant.")

    elif "how r u" in command:
        speak("I'm just a program, but I'm here to assist you!")

    else:
        output=aiProcess(command)
        speak(output)

if __name__ == "__main__":
    speak("Initializing Jarvis...")

    while True:
        print("Recognizing...")

        try:
            with sr.Microphone() as source:
                print("Listening...")
                recognizer.adjust_for_ambient_noise(source)  # Adjust for ambient noise
                audio = recognizer.listen(source)

            word = recognizer.recognize_google(audio)
            print("You said:", word)

            if word.lower() == "jarvis" or "hey jarvis":
                speak("Yes, what can I help you with?")

                with sr.Microphone() as source:
                    print("Jarvis Active...")
                    recognizer.adjust_for_ambient_noise(source)
                    audio = recognizer.listen(source)
                    command = recognizer.recognize_google(audio)

                    print("Command:", command)  # Added for debugging
                    processCommand(command)

        except sr.UnknownValueError:
            print("Google Speech Recognition could not understand audio")
        except sr.RequestError as e:
            print(f"Google Speech Recognition error; {e}")